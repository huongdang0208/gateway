// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hubscreen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hubscreen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hubscreen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hubscreen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hubscreen_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hubscreen_2eproto;
namespace hubscreen {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Led_t;
struct Led_tDefaultTypeInternal;
extern Led_tDefaultTypeInternal _Led_t_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Switch_t;
struct Switch_tDefaultTypeInternal;
extern Switch_tDefaultTypeInternal _Switch_t_default_instance_;
}  // namespace hubscreen
PROTOBUF_NAMESPACE_OPEN
template<> ::hubscreen::Command* Arena::CreateMaybeMessage<::hubscreen::Command>(Arena*);
template<> ::hubscreen::Led_t* Arena::CreateMaybeMessage<::hubscreen::Led_t>(Arena*);
template<> ::hubscreen::Response* Arena::CreateMaybeMessage<::hubscreen::Response>(Arena*);
template<> ::hubscreen::Switch_t* Arena::CreateMaybeMessage<::hubscreen::Switch_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hubscreen {

// ===================================================================

class Led_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hubscreen.Led_t) */ {
 public:
  inline Led_t() : Led_t(nullptr) {}
  ~Led_t() override;
  explicit PROTOBUF_CONSTEXPR Led_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Led_t(const Led_t& from);
  Led_t(Led_t&& from) noexcept
    : Led_t() {
    *this = ::std::move(from);
  }

  inline Led_t& operator=(const Led_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Led_t& operator=(Led_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Led_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Led_t* internal_default_instance() {
    return reinterpret_cast<const Led_t*>(
               &_Led_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Led_t& a, Led_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Led_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Led_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Led_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Led_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Led_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Led_t& from) {
    Led_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Led_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hubscreen.Led_t";
  }
  protected:
  explicit Led_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kStateFieldNumber = 1,
    kIdFieldNumber = 2,
    kPinFieldNumber = 14,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 pin = 14;
  void clear_pin();
  int32_t pin() const;
  void set_pin(int32_t value);
  private:
  int32_t _internal_pin() const;
  void _internal_set_pin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hubscreen.Led_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t state_;
    int32_t id_;
    int32_t pin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hubscreen_2eproto;
};
// -------------------------------------------------------------------

class Switch_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hubscreen.Switch_t) */ {
 public:
  inline Switch_t() : Switch_t(nullptr) {}
  ~Switch_t() override;
  explicit PROTOBUF_CONSTEXPR Switch_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Switch_t(const Switch_t& from);
  Switch_t(Switch_t&& from) noexcept
    : Switch_t() {
    *this = ::std::move(from);
  }

  inline Switch_t& operator=(const Switch_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Switch_t& operator=(Switch_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Switch_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Switch_t* internal_default_instance() {
    return reinterpret_cast<const Switch_t*>(
               &_Switch_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Switch_t& a, Switch_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Switch_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Switch_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Switch_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Switch_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Switch_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Switch_t& from) {
    Switch_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Switch_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hubscreen.Switch_t";
  }
  protected:
  explicit Switch_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kStateFieldNumber = 4,
    kIdFieldNumber = 5,
    kPinFieldNumber = 15,
  };
  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 state = 4;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // int32 id = 5;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 pin = 15;
  void clear_pin();
  int32_t pin() const;
  void set_pin(int32_t value);
  private:
  int32_t _internal_pin() const;
  void _internal_set_pin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hubscreen.Switch_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t state_;
    int32_t id_;
    int32_t pin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hubscreen_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hubscreen.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hubscreen.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwDeviceFieldNumber = 10,
    kLedDeviceFieldNumber = 11,
    kActionFieldNumber = 7,
    kSenderFieldNumber = 8,
    kReceiverFieldNumber = 9,
    kUserIDFieldNumber = 14,
  };
  // repeated .hubscreen.Switch_t sw_device = 10;
  int sw_device_size() const;
  private:
  int _internal_sw_device_size() const;
  public:
  void clear_sw_device();
  ::hubscreen::Switch_t* mutable_sw_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Switch_t >*
      mutable_sw_device();
  private:
  const ::hubscreen::Switch_t& _internal_sw_device(int index) const;
  ::hubscreen::Switch_t* _internal_add_sw_device();
  public:
  const ::hubscreen::Switch_t& sw_device(int index) const;
  ::hubscreen::Switch_t* add_sw_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Switch_t >&
      sw_device() const;

  // repeated .hubscreen.Led_t led_device = 11;
  int led_device_size() const;
  private:
  int _internal_led_device_size() const;
  public:
  void clear_led_device();
  ::hubscreen::Led_t* mutable_led_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Led_t >*
      mutable_led_device();
  private:
  const ::hubscreen::Led_t& _internal_led_device(int index) const;
  ::hubscreen::Led_t* _internal_add_led_device();
  public:
  const ::hubscreen::Led_t& led_device(int index) const;
  ::hubscreen::Led_t* add_led_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Led_t >&
      led_device() const;

  // string action = 7;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string sender = 8;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 9;
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // int32 userID = 14;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hubscreen.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Switch_t > sw_device_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Led_t > led_device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hubscreen_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hubscreen.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hubscreen.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 12,
    kMessageFieldNumber = 13,
  };
  // string status = 12;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 13;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:hubscreen.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hubscreen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Led_t

// int32 state = 1;
inline void Led_t::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t Led_t::_internal_state() const {
  return _impl_.state_;
}
inline int32_t Led_t::state() const {
  // @@protoc_insertion_point(field_get:hubscreen.Led_t.state)
  return _internal_state();
}
inline void Led_t::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void Led_t::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:hubscreen.Led_t.state)
}

// int32 id = 2;
inline void Led_t::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Led_t::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Led_t::id() const {
  // @@protoc_insertion_point(field_get:hubscreen.Led_t.id)
  return _internal_id();
}
inline void Led_t::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Led_t::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hubscreen.Led_t.id)
}

// string name = 3;
inline void Led_t::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Led_t::name() const {
  // @@protoc_insertion_point(field_get:hubscreen.Led_t.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Led_t::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Led_t.name)
}
inline std::string* Led_t::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:hubscreen.Led_t.name)
  return _s;
}
inline const std::string& Led_t::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Led_t::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Led_t::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Led_t::release_name() {
  // @@protoc_insertion_point(field_release:hubscreen.Led_t.name)
  return _impl_.name_.Release();
}
inline void Led_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Led_t.name)
}

// int32 pin = 14;
inline void Led_t::clear_pin() {
  _impl_.pin_ = 0;
}
inline int32_t Led_t::_internal_pin() const {
  return _impl_.pin_;
}
inline int32_t Led_t::pin() const {
  // @@protoc_insertion_point(field_get:hubscreen.Led_t.pin)
  return _internal_pin();
}
inline void Led_t::_internal_set_pin(int32_t value) {
  
  _impl_.pin_ = value;
}
inline void Led_t::set_pin(int32_t value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:hubscreen.Led_t.pin)
}

// -------------------------------------------------------------------

// Switch_t

// int32 state = 4;
inline void Switch_t::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t Switch_t::_internal_state() const {
  return _impl_.state_;
}
inline int32_t Switch_t::state() const {
  // @@protoc_insertion_point(field_get:hubscreen.Switch_t.state)
  return _internal_state();
}
inline void Switch_t::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void Switch_t::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:hubscreen.Switch_t.state)
}

// int32 id = 5;
inline void Switch_t::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Switch_t::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Switch_t::id() const {
  // @@protoc_insertion_point(field_get:hubscreen.Switch_t.id)
  return _internal_id();
}
inline void Switch_t::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Switch_t::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hubscreen.Switch_t.id)
}

// string name = 6;
inline void Switch_t::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Switch_t::name() const {
  // @@protoc_insertion_point(field_get:hubscreen.Switch_t.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Switch_t::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Switch_t.name)
}
inline std::string* Switch_t::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:hubscreen.Switch_t.name)
  return _s;
}
inline const std::string& Switch_t::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Switch_t::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Switch_t::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Switch_t::release_name() {
  // @@protoc_insertion_point(field_release:hubscreen.Switch_t.name)
  return _impl_.name_.Release();
}
inline void Switch_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Switch_t.name)
}

// int32 pin = 15;
inline void Switch_t::clear_pin() {
  _impl_.pin_ = 0;
}
inline int32_t Switch_t::_internal_pin() const {
  return _impl_.pin_;
}
inline int32_t Switch_t::pin() const {
  // @@protoc_insertion_point(field_get:hubscreen.Switch_t.pin)
  return _internal_pin();
}
inline void Switch_t::_internal_set_pin(int32_t value) {
  
  _impl_.pin_ = value;
}
inline void Switch_t::set_pin(int32_t value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:hubscreen.Switch_t.pin)
}

// -------------------------------------------------------------------

// Command

// string action = 7;
inline void Command::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& Command::action() const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Command.action)
}
inline std::string* Command::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:hubscreen.Command.action)
  return _s;
}
inline const std::string& Command::_internal_action() const {
  return _impl_.action_.Get();
}
inline void Command::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_action() {
  // @@protoc_insertion_point(field_release:hubscreen.Command.action)
  return _impl_.action_.Release();
}
inline void Command::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Command.action)
}

// string sender = 8;
inline void Command::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& Command::sender() const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Command.sender)
}
inline std::string* Command::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:hubscreen.Command.sender)
  return _s;
}
inline const std::string& Command::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void Command::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_sender() {
  // @@protoc_insertion_point(field_release:hubscreen.Command.sender)
  return _impl_.sender_.Release();
}
inline void Command::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Command.sender)
}

// string receiver = 9;
inline void Command::clear_receiver() {
  _impl_.receiver_.ClearToEmpty();
}
inline const std::string& Command::receiver() const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_receiver(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Command.receiver)
}
inline std::string* Command::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:hubscreen.Command.receiver)
  return _s;
}
inline const std::string& Command::_internal_receiver() const {
  return _impl_.receiver_.Get();
}
inline void Command::_internal_set_receiver(const std::string& value) {
  
  _impl_.receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_receiver() {
  
  return _impl_.receiver_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_receiver() {
  // @@protoc_insertion_point(field_release:hubscreen.Command.receiver)
  return _impl_.receiver_.Release();
}
inline void Command::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_.SetAllocated(receiver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_.IsDefault()) {
    _impl_.receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Command.receiver)
}

// repeated .hubscreen.Switch_t sw_device = 10;
inline int Command::_internal_sw_device_size() const {
  return _impl_.sw_device_.size();
}
inline int Command::sw_device_size() const {
  return _internal_sw_device_size();
}
inline void Command::clear_sw_device() {
  _impl_.sw_device_.Clear();
}
inline ::hubscreen::Switch_t* Command::mutable_sw_device(int index) {
  // @@protoc_insertion_point(field_mutable:hubscreen.Command.sw_device)
  return _impl_.sw_device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Switch_t >*
Command::mutable_sw_device() {
  // @@protoc_insertion_point(field_mutable_list:hubscreen.Command.sw_device)
  return &_impl_.sw_device_;
}
inline const ::hubscreen::Switch_t& Command::_internal_sw_device(int index) const {
  return _impl_.sw_device_.Get(index);
}
inline const ::hubscreen::Switch_t& Command::sw_device(int index) const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.sw_device)
  return _internal_sw_device(index);
}
inline ::hubscreen::Switch_t* Command::_internal_add_sw_device() {
  return _impl_.sw_device_.Add();
}
inline ::hubscreen::Switch_t* Command::add_sw_device() {
  ::hubscreen::Switch_t* _add = _internal_add_sw_device();
  // @@protoc_insertion_point(field_add:hubscreen.Command.sw_device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Switch_t >&
Command::sw_device() const {
  // @@protoc_insertion_point(field_list:hubscreen.Command.sw_device)
  return _impl_.sw_device_;
}

// repeated .hubscreen.Led_t led_device = 11;
inline int Command::_internal_led_device_size() const {
  return _impl_.led_device_.size();
}
inline int Command::led_device_size() const {
  return _internal_led_device_size();
}
inline void Command::clear_led_device() {
  _impl_.led_device_.Clear();
}
inline ::hubscreen::Led_t* Command::mutable_led_device(int index) {
  // @@protoc_insertion_point(field_mutable:hubscreen.Command.led_device)
  return _impl_.led_device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Led_t >*
Command::mutable_led_device() {
  // @@protoc_insertion_point(field_mutable_list:hubscreen.Command.led_device)
  return &_impl_.led_device_;
}
inline const ::hubscreen::Led_t& Command::_internal_led_device(int index) const {
  return _impl_.led_device_.Get(index);
}
inline const ::hubscreen::Led_t& Command::led_device(int index) const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.led_device)
  return _internal_led_device(index);
}
inline ::hubscreen::Led_t* Command::_internal_add_led_device() {
  return _impl_.led_device_.Add();
}
inline ::hubscreen::Led_t* Command::add_led_device() {
  ::hubscreen::Led_t* _add = _internal_add_led_device();
  // @@protoc_insertion_point(field_add:hubscreen.Command.led_device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hubscreen::Led_t >&
Command::led_device() const {
  // @@protoc_insertion_point(field_list:hubscreen.Command.led_device)
  return _impl_.led_device_;
}

// int32 userID = 14;
inline void Command::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t Command::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t Command::userid() const {
  // @@protoc_insertion_point(field_get:hubscreen.Command.userID)
  return _internal_userid();
}
inline void Command::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void Command::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:hubscreen.Command.userID)
}

// -------------------------------------------------------------------

// Response

// string status = 12;
inline void Response::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Response::status() const {
  // @@protoc_insertion_point(field_get:hubscreen.Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Response.status)
}
inline std::string* Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:hubscreen.Response.status)
  return _s;
}
inline const std::string& Response::_internal_status() const {
  return _impl_.status_.Get();
}
inline void Response::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_status() {
  // @@protoc_insertion_point(field_release:hubscreen.Response.status)
  return _impl_.status_.Release();
}
inline void Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Response.status)
}

// string message = 13;
inline void Response::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:hubscreen.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hubscreen.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hubscreen.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:hubscreen.Response.message)
  return _impl_.message_.Release();
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hubscreen.Response.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hubscreen

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hubscreen_2eproto
